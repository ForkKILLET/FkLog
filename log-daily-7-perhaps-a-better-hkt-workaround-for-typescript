- _TL;DR: Declaration merging + Instantiation expressions + `@ts-ignore` = HKT workaround_

- 免责声明：本人没有系统学过类型相关知识，以下内容可能充斥各类错误，还请指正！

## 并不专业的 HKT 介绍

- 翻译：HKT: Higher Kinded Type，高阶类型。

- 举例

  - 在原生支持 HKT 的语言，例如 Haskell 中，我们可以实现 `Functor` 类型类：

    ```haskell
    class Functor f where
        fmap :: (a -> b) -> f a -> f b
    ```

  - 其中 `f` 就是一个高阶类型，也可以说类型构造器（type constructor），它的 kind 是 `* -> *`，也就是它要接受一个类型参数（第一个 `*`），才会构造出一个普通的类型（第二个 `*`）。  
    看 `fmap` 的签名：先接受一个 `a -> b` 的函数，再接受一个「装有 `a` 的容器」（`f a`），返回那个函数作用的结果：「装有 `b` 的容器」（`f b`）。

  - 具体一点，列表 `[]` 是一个类型构造器，它要接受一个类型参数比如 `Int` 才会变成「普通的」类型 `[Int]`。  
    为 `[]` 实现 `Functor`：

    ```haskell
    instance Functor [] where
    	-- fmap :: (a -> b) -> [a] -> [b]
    	fmap f xs = [ f x | x <- xs ]
    ```


## 好东西我们 TS 也要有！

那么在 TypeScript 中能不能表达 `Functor` 呢？（我们就让 `fmap` 是对象上的方法好了）- 

要写的话就是这样：

```typescript
interface Functor<F> {
    fmap: <A, B>(f: (a: A) => B, fa: F<A>) => F<B>
}
```

但是行不通：`Type 'F' is not generic.`，因为 TypeScript 目前并不支持高阶类型，只有一个 issue [#44875](https://github.com/microsoft/TypeScript/issues/44875)（嗯，提出时间是 2014 年）。

到此为止了吗？

## 就把尖括号找个地方一塞

我们遇到的问题是：泛型参数没法是一个类型构造器（也就是 TypeScript 里的带尖括号的泛型类型），没有 `interface Functor<F<_>>` 这种写法。

不过 TypeScript 里还有别的能带泛型的东西，比如函数。我们把泛型类型 `type T<X> = ...` 改成「泛型函数类型」 `type F = <X>() => T<X>`，就能传进去了，就像这样：

```typescript
type List = <T>() => T[] // 叫它模拟类型好了
type ListFunctor = Functor<List>
```

那么，`Functor` 该怎么处理这个泛型函数类型 `List` 呢？

注意到 TypeScript 4.7 引入了 [Instantiation expressions](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html#instantiation-expressions) 特性：

```typescript
const _any = 1 as any
const _list: List = _any
type _list_number = typeof _list<number>
type ListNumber = ReturnType<_List_number> // number[]
```

这样我们就成功用模拟类型实现了「单类型参数」泛型类型的定义和求值。

## 	还是打表吧

现在的问题是：`Functor` 还不能处理任意的模拟类型（目前似乎确实做不到）。不过我们可以把要用的模拟类型都放在一个 `interface` 里，这样还能做 declaration merging，让用户能轻松扩展。

```typescript
export interface TypeCtors {
    Array: <X>() => X[]			
    Dict: <X>() => Record<string, X>
}

const _any = 1 as any

const _apply = <T extends keyof TypeCtors, A>() => {
    const _f: TypeCtors[T] = _any
    return _any as ReturnType<typeof _f<A>>
}

type Apply<T extends keyof TypeCtors, A> = typeof _apply<T, A>

type ArrayNumber = Apply<'Array', number> // 坏了，是 () => number[] | Record<string, number>
```

我不知道怎么解决这个问题，不过我们可以在 `TypeCtors` 表里手动编码 tag：

```typescript
export interface TypeCtors {
    List: <X>() => [ 'List', X[] ]
    Dict: <X>() => [ 'Dict', Record<string, X> ]
    Functor: <F>() => [ 'Functor', {
        fmap: <X, Y>(f: (x: X) => Y, mx: Apply0<F, X>) => Apply0<F, Y>
    } ]
}

const _any = 1 as any

const _apply = <T extends keyof TypeCtors, A>() => {
    const _f: TypeCtors[T] = _any
    type R0 = ReturnType<typeof _f<A>>
    type R1<R> = R extends [ T, infer R ] ? R : never
    return _any as R1<R0>
}

// Apply 和 Apply0 的区别在于 Apply 有补全，体验更好
type Apply0<T, A> = T extends keyof TypeCtors ? Apply<T, A> : never
type Apply<T extends keyof TypeCtors, A> = ReturnType<typeof _apply<T, A>>

type NumberArray = Apply<'List', number> // number[]
type NumberDict = Apply<'Dict', number> // Record<string, number>	
type ListFunctor = Apply<'Functor', 'List'> // { fmap: <X, Y>(f: (x: X) => Y, mx: X[]) => Y[]; }
```

这样，我们最初的目标——表达 `Functor` 就已经完成了。

## 再高一点！

不过，前文也提到了，现在的 `Apply` 类型只能计算「单类型参数」泛型类型。为了支持不同个数的类型参数，我们又需要手动编码了：

```typescript
export interface TypeCtors {
    List: {
        level: 1,
        def: <X>() => [ 'List', X[] ]
    }
    State: {
        level: 2,
        def: <S, X>() => [ 'State', (s: S) => [ S, X ] ]
    }
}

export type TypeCtorName = keyof TypeCtors
```

但是，这样一来之前的 `_f` 有可能有一个类型参数，也有可能有两个，TypeScript 推不出来它应该有几个参数，所以……只需要用 `// @ts-ignore` 解决出问题的人即可。新的 `_apply` 实现如下：

```typescript
const _any: any = 1

const _apply = <T extends TypeCtorName, A extends any[]>() => {
    const _f = _any as TypeCtors[T]['def']
    type R0 = TypeCtors[T] extends { level: infer N }
        ? N extends 1
            ? A extends [ infer A1 ]
                // @ts-ignore
                ? typeof _f<A1>
                : never
        : N extends 2
            ? A extends [ infer A1, infer A2 ]
                // @ts-ignore
                ? typeof _f<A1, A2>
                : never
        : N extends 3
            ? A extends [ infer A1, infer A2, infer A3 ]
                // @ts-ignore
                ? typeof _f<A1, A2, A3>
                : never
            : never
        // 可以多写一点，如果你需要
        : never
    type R1<R> = R extends (...args: any[]) => any
        ? ReturnType<R> extends [ T, infer R2 ]
            ? R2
            : never
        : R extends string ? R : never
    return _any as R1<R0>
}

export type Apply0<T, A extends any[]> = T extends TypeCtorName ? ReturnType<typeof _apply<T, A>> : never

export type Apply<T extends TypeCtorName, A extends any[]> = Apply0<T, A>
    
type S = Apply<'State', [ Apply<'List', [ number ]>, number | void ]>
// (s: number[]) => [number[], number | void]，完美！
```

## 未完待续……

