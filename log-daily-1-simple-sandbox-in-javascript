## 沙箱是什么

沙箱指的是一个安全的虚拟执行环境，可以在其中运行**不信任**的代码，而沙箱外的环境不会受到影响.

## 构建 _简单的_ 沙箱

### 运行代码

沙箱要能安全的跑起来，首先得能跑.（废话）

在（浏览器） JavaScript 中，运行外部代码，最简单（也被认为最不安全）的方式就是 `eval`. 我们将尝试基于 `eval` 构建一个沙箱.

### 什么是不安全的

我们会希望沙箱只能访问和修改允许的变量：尤其是 `window`. 我们必须控制 `window`，才能控制任何其他全局变量.

### 和 `window` 的斗争

我们首先想到将 `eval` 调用置于一个闭包中，并向闭包传递 `window` 和其他（你不会忘记  `globalThis`，`top`，`self`，`frames` 这些小可爱吧）参数.

```js
const build_sandbox = global => ((window /*, ...*/) => code => eval(code))(global)
const data = { a: 2 }
const box = build_sandbox({ Math, data })

box(`window.document.write("XSS")`) // throw
box(`window.data.a *= window.Math.PI`) // 6.283185307179586
```

效果不错，不信任代码只能拿到我们设计的 `window`，在受控的范围内和数据交互.

但还有两个问题：

1. 编写这种沙箱要有足够的耐心：对于每一个我们希望控制的全局变量，都得这么传入闭包.
2. 没有干掉 `this`.

### 和 `this` 的斗争

```js
box("this") // window, 完蛋
```

要让 `this` 不指向 `window`，我们只能使用 `"use strict"`. 为闭包绑定 `this` 不能阻止不信任代码内部函数的 `this` 指向 `window`.

```js
const build_sandbox = global => ((window /*, ...*/) => code => eval(`
	(function() {
    	"use strict"
    	return ${code}
    })()
`))(global)
const box = build_sandbox({})

box("this") // undefined
box("(function() { return this })()") // undefined
```

看上去不错.

### 防止“越狱”

```js
box(`}); (function() { this.console.log("Good bye, \\"use strict\\"") `) // 完蛋
```

看看上面的沙箱实际运行了什么：

```js
(function() {
	"use strict"
    return }); // 不信任代码结束了本应包裹它的函数体！
(function() {
    this.console.log("Good bye, \"use strict\"") 
})()
```

我们可以用 `Function` 升级“监狱”：

```js
const build_sandbox = global => ((window /*, ...*/) => code => new Function(`
	"use strict"
	return ${code}
`)())(global)
```

### 更简单地控制

我们不想再这样传入一大堆全局变量了！简单的 `Proxy` 可以解决问题.

```js
const env = new Proxy({ Math, console }, {
    has: () => true
})
env.console.log(env.Math.PI, env.window) // 3.141592653589793 undefined
```

可是有什么用呢？这就需要请出存在感极低的关键字 `with` 了.

```js
const env = build_environment({ Math, console })
with (env) {
    console.log(Math.PI, window) // 3.141592653589793 undefined
}
```

**原理**：注意调用 `Proxy`  时的 `has: () => true`，这样配合 `with`，任何变量都会经过代理.

封装一下以上的内容：

```js
const build_environment = env => new Proxy(env, {
    has: () => true
})
const build_whitelisted_environment = whitelist => new Proxy(window, {
    has: () => true,
    get: (w, k) => whitelist.includes(k) ? w[k] : undefined
})
const build_sandbox = env => code => {
    with (env) {
        return new Function(`
            "use strict";
            return ${code};
        `)()
    }
}
```

## 特别关心

简单沙箱基本上已经完成，但是还有一些危险的因素值得说明一下

### 又是 `Function`

```js
const box = build_sandbox({ Function })
box(`Function("alert(\\"XSS\\")")()`) // 完蛋
```

但是，谁会把 `Function` 放进沙箱呢？

我们考虑：

```js
(() => {}).__proto__.constructor === Function // true
box(`((() => {}).__proto__.constructor)("alert(\\"XSS\\")")()`) // 完蛋
```

只好把它删掉了：（`delete` 是不行的）

```js
Function.prototype.constructor = null
```

但是不够，因为除了 `Function`，我们还有 `AsyncFunction`，`GeneratorFunction`，……还有 `AsyncGeneratorFunction`！

全都无害化处理：

```js
(async () => {}).__proto__.constructor = null
(function *() {}).__proto__.constructor = null
(async function *() {}).__proto__.constructor = null
```

### `setTimeout` 和 `setInterval`

传入这两个函数的时候要小心：

```js
setTimeout(`alert("XSS")`, 0) // 完蛋
```

我们可以检查参数类型将其无害化：

```js
const safeCallback = f => (cb, ...arg) => {
	if (typeof cb !== "function") throw new TypeError("Callback should be a function.")
	return f(cb, ...arg)
}
const safeTimeout = safeCallback(setTimeout)
const safeInterval = safeCallback(setInterval)
```

### 动态 `import`

虽然有同源策略的保护，但你不会希望不信任代码表演一段 `await import("...")` 的吧？

可以用正则检查这个关键字：

```js
const build_sandbox = env => code => {
    if (/\bimport\b/.test(code)) throw new SyntaxError("Wanna import? You don't.")
    // ...
}
```

### `Symbol.unscopables`

似乎没什么用，也确实如此，因为目前只有 ` Array.prototype` 上存在 `Symbol.unscopables` 键. 但多做准备总没错.

```js
const build_environment = env => new Proxy(env, {
    has: () => true,
    get: (_, k) => {
        if (k === Symbol.unscopables) return undefined
        return env[k]
    }
})
```

## 总结

### Show me the code

```js
Function.prototype.constructor = null
(async () => {}).__proto__.constructor = null
(function *() {}).__proto__.constructor = null
(async function *() {}).__proto__.constructor = null

const safeCallback = f => (cb, ...arg) => {
	if (typeof cb !== "function") throw new TypeError("Callback should be a function.")
	return f(cb, ...arg)
}
const safeTimeout = safeCallback(setTimeout)
const safeInterval = safeCallback(setInterval)

const build_environment = env => new Proxy(env, {
    has: () => true,
    get: (_, k) => {
        if (k === Symbol.unscopables) return undefined
        return env[k]
    }
})
const build_whitelisted_environment = whitelist => new Proxy(window, {
    has: () => true,
    get: (w, k) => whitelist.includes(k) ? w[k] : undefined
})
const build_sandbox = env => code => {
    with (env) {
        if (/\bimport\b/.test(code)) throw new SyntaxError("Wanna import? You don't.")
        return new Function(`
            "use strict";
            return ${code};
        `)() // 如果不需要立即执行，删掉这对圆括号
    }
}
```

### 其他方案

- （仅在 node.js 中）使用 `vm` 模块：完美
- 使用 `<iframe>`：通信上比较麻烦
- 使用 `jsjs` 等解析器：精准掌控每一个细节，但比较麻烦，效率也低
