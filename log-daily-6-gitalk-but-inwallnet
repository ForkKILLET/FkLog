## 在 Vue 中使用 [Gitalk](https://github.com/gitalk/gitalk)

GitHub App 搭建过程相关资料很多，略。

下面简单封装一个适用于 Vue 3 的组件，通过 `config` prop 传入配置。

```html
<script setup lang="ts">
import Gitalk from 'gitalk'
import 'gitalk/dist/gitalk.css'
import { onMounted, ref, Ref } from 'vue'

const props = defineProps<{
    config: Gitalk.GitalkOptions
}>()

const gitalk = new Gitalk(props.config)

const gitalkContainer: Ref<HTMLDivElement | null> = ref(null)

onMounted(() => gitalk.render(gitalkContainer.value!))
</script>

<template>
    <div class="gitalk-container" ref="gitalkContainer"></div>
</template>
```

## 跨域和因瓦网

Gitalk 将评论储存在 GitHub Issues 中，为了和 GitHub 鉴权 API（<https://github.com/login/oauth/access_token>）通信，必须绕过浏览器的 CORS（跨域）限制。

Gitalk 的 CORS 服务是 `proxy` 选项指定的，默认为 <https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token>，但是被墙了。

可以在网上找到的解决方案是：

- 使用其它免费 CORS 服务，但限流：<https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token>
- 通过 CORS anywhere 项目（[GitHub](https://github.com/Rob--W/cors-anywhere) · [NPM](https://www.npmjs.com/package/cors-anywhere)） 自行搭建 CORS 服务

但是，本人尝试搭建后，总是返回 `404 Not Found`。调查了一些使用 Gitalk 的博客后发现了问题所在：

这个 API 应当通过 `GET` 方法调用，而 Gitalk 会发起 `POST` 请求。手写了 CORS 服务，将 `GET` query 转化为 `POST` body 后，可以得到正常回应。（猜测上面列出的免费服务也有这一步转化）

以下是使用 fastify 框架搭建的 [demo](https://be.icelava.top/github_access_token)。（也是本站使用的）

```js
import Fastify from 'fastify'
import cors from '@fastify/cors'
import fetch from 'node-fetch'

const fastify = Fastify({ logger: true })

fastify.register(cors, {
        origin: [
                'https://icelava.top'
        ],
        methods: ['GET', 'PUT', 'POST', 'OPTIONS']
})

fastify.post('/github_access_token', async (req) => {
        const api = 'https://github.com/login/oauth/access_token?'
                + new URLSearchParams(req.body)
        const rep = await fetch(api, {
                headers: {
                        'Accept': 'application/json'
                }
        })
        return rep.json()
})

fastify.listen({ port: 1628 })
```

至此，Gitalk 评论区可以正常使用。
